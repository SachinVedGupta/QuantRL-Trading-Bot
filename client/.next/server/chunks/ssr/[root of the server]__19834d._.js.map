{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sachi/OneDrive/Desktop/Coding%20Projects/QuantRL-Trading-Bot/client/src/pages/_document.tsx"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body className=\"antialiased\">\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;;;;;0BACL,qKAAC;gBAAK,WAAU;;kCACd,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sachi/OneDrive/Desktop/Coding%20Projects/QuantRL-Trading-Bot/client/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport type { AppProps } from \"next/app\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\n"],"names":[],"mappings":";;;;;;AAGe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBAAO,qKAAC;QAAW,GAAG,SAAS;;;;;;AACjC"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/sachi/OneDrive/Desktop/Coding%20Projects/QuantRL-Trading-Bot/client/src/pages/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nfunction Index() {\n  const [stepsData, setStepsData] = useState<any[]>([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/trades\")\n      .then((response) => response.json())\n      .then((data) => {\n        const steps = [];\n        for (const outerKey in data) {\n          const innerData = data[outerKey];\n          for (const innerKey in innerData) {\n            const stepDetails = {\n              key: outerKey,\n              subKey: innerKey,\n              ...innerData[innerKey],\n            };\n            steps.push(stepDetails);\n          }\n        }\n        setStepsData(steps);\n      });\n  }, []);\n\n  // Transform the data for charts\n  const steps = stepsData.map((step) => step.step);\n  const stockPrices = [0, 1, 2].map((i) => stepsData.map((step) => step.stock_prices[i]));\n  const portfolioValues = stepsData.map((step) => step.portfolio_value);\n  const stocksOwned = [0, 1, 2].map((i) => stepsData.map((step) => step.stocks_owned[i]));\n\n  const stockLabels = [\"Apple\", \"Motorola\", \"Starbucks\"];\n\n  // Define chart datasets\n  const stockPricesData = {\n    labels: steps,\n    datasets: stockLabels.map((label, index) => ({\n      label: `${label} Stock Price`,\n      data: stockPrices[index],\n      borderColor: [\"red\", \"blue\", \"green\"][index],\n      fill: false,\n    })),\n  };\n\n  const portfolioValueData = {\n    labels: steps,\n    datasets: [\n      {\n        label: \"Portfolio Value\",\n        data: portfolioValues,\n        borderColor: \"purple\",\n        fill: false,\n      },\n    ],\n  };\n\n  const stocksOwnedData = {\n    labels: steps,\n    datasets: stockLabels.map((label, index) => ({\n      label: `${label} Stocks Owned`,\n      data: stocksOwned[index],\n      borderColor: [\"orange\", \"yellow\", \"pink\"][index],\n      fill: false,\n    })),\n  };\n\n  const [showDetails, setShowDetails] = useState(false);\n\n  return (\n        <div className=\"max-w-screen-xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\n            <div>\n        {/* Header */}\n        <h1 className=\"text-3xl font-bold text-center text-gray-800 mb-8\">\n          QuantRL - Automated Trading Bot\n        </h1>\n\n        {/* Toggle Button */}\n        <div className=\"text-center mb-4\">\n          <button\n            onClick={() => setShowDetails((prev) => !prev)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300\"\n          >\n            {showDetails ? \"Hide Details\" : \"About Project\"}\n          </button>\n        </div>\n\n        {/* Conditional Rendering of Details */}\n        {showDetails && (\n          <div className=\"p-6 mb-8 rounded-lg shadow-lg ring-4 ring-blue-200 ring-offset-4 ring-offset-blue-50\">\n            <h2 className=\"text-xl text-blue-900 mb-4 text-center\">\n              Below you will find the trades made by the custom-made automated trading bot. Each episode has approximately 600 steps (each step represents a day).\n            </h2>\n            <h2 className=\"text-xl text-blue-900 mb-4 text-center\">\n              The initial investment is $100,000. View the charts below for graphs representing the Stock Prices, Portfolio Value, and Stocks Owned at any given time step (day). The \"stocks owned\" depicts what the stock trader is doing at any given time, with shifts meaning that the bot has bought/sold certain stocks at that time.\n            </h2>\n            <h2 className=\"text-xl text-blue-900 mb-4 text-center\">\n              This is an ML + Reinforcement Learning based Stock Trading bot. It operates in a customer environment where there are actions and states. When in training mode, the bot's actions affect its reward, which is used as a metric for it (the model) to learn, train, and improve. It runs through the training data (first half of historical data) multiple times, continuously optimizing and improving as it gains more and more experience. Then, it applies that \"knowledge\" when running on the test data, of which it has never seen before (second half of historical data). It runs over this just once, in order to simulate a real-world scenario where you just have one chance to invest and can't go back or have a redo.\n            </h2>\n            <h2 className=\"text-xl text-blue-900 mb-4 text-center\">\n              At any given time, the bot only knows the current and historical data, and is doing actions (buy/sell/hold any stock respectively) that it believes will maximize the future reward (a high portfolio value). Therefore, it is essentially running through a simulation, that mimics how it would work in real life!\n            </h2>\n          </div>\n        )}\n      </div>\n\n      {/* Stock Prices Chart */}\n      <div className=\"bg-white mb-6 p-6 rounded-lg shadow-md\">\n        <h2 className=\"text-xl text-blue-600 mb-4 text-center\">Stock Prices</h2>\n        <Line data={stockPricesData} />\n      </div>\n\n      {/* Portfolio Value Chart */}\n      <div className=\"bg-white mb-6 p-6 rounded-lg shadow-md\">\n        <h2 className=\"text-xl text-blue-600 mb-4 text-center\">Portfolio Value</h2>\n        <Line data={portfolioValueData} />\n      </div>\n\n      {/* Stocks Owned Chart */}\n      <div className=\"bg-white mb-6 p-6 rounded-lg shadow-md\">\n        <h2 className=\"text-xl text-blue-600 mb-4 text-center\">Stocks Owned</h2>\n        <Line data={stocksOwnedData} />\n      </div>\n\n      {/* Individual Steps Data */}\n      {stepsData.map((stepData, index) => (\n        <div className=\"bg-white mb-6 p-6 rounded-lg shadow-md\" key={index}>\n          <h2 className=\"text-xl text-blue-600 mb-4\">\n            Episode: {stepData.key}, Step: {stepData.subKey}\n          </h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"text-lg text-gray-800 mb-2\">Action:</h3>\n              <ul className=\"list-none\">\n                {stepData.action.map((item, idx) => (\n                  <li key={idx} className=\"text-gray-600\">\n                    {stockLabels[idx]}: {item === 0 ? \"Sell\" : item === 1 ? \"Hold\" : \"Buy\"}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"text-lg text-gray-800 mb-2\">Cash in Hand:</h3>\n              <p className=\"text-gray-800\">${stepData.cash_in_hand.toFixed(2)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-lg text-gray-800 mb-2\">Portfolio Value:</h3>\n              <p className=\"text-gray-800\">${stepData.portfolio_value.toFixed(2)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-lg text-gray-800 mb-2\">Stock Prices:</h3>\n              <ul className=\"list-none\">\n                {stepData.stock_prices.map((price, idx) => (\n                  <li key={idx} className=\"text-gray-600\">\n                    {stockLabels[idx]}: ${price.toFixed(2)}\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"text-lg text-gray-800 mb-2\">Stocks Owned:</h3>\n              <ul className=\"list-none\">\n                {stepData.stocks_owned.map((owned, idx) => (\n                  <li key={idx} className=\"text-gray-600\">\n                    {stockLabels[idx]}: {owned}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Index;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 583, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}